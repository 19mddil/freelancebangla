{"ast":null,"code":"import { API } from \"../utils/config\";\nimport axios from 'axios';\nexport const createJobAdvertise = (token, data) => {\n  return axios.post(`${API}/user/client/job/advertise/new`, data, {\n    headers: {\n      'Authorization': `${token}` //it will go to authorize middle ware check and destructed to user from token which will later be used to check whether the user is admin or not.\n    }\n  });\n};\n\nexport const loadAllJobAdvertiseforClientId = (token, id) => {\n  return axios.get(`${API}/user/client/job/view/all/advertised/${id}`, {\n    headers: {\n      'Authorization': `${token}` //it will go to authorize middle ware check and destructed to user from token which will later be used to check whether the user is admin or not.\n    }\n  });\n};\n\nexport const loadJobApplicantsByJobId = (token, job_id, client_id) => {\n  return axios.get(`${API}/user/client/job/view/all/applicants/${job_id}/${client_id}`, {\n    headers: {\n      'Authorization': `${token}` //it will go to authorize middle ware check and destructed to user from token which will later be used to check whether the user is admin or not.\n    }\n  });\n};\n\nexport const selectWorkersApplication = (token, data) => {\n  // data has selected_application_id\n  return axios.post(`${API}/user/client/job/select/worker/application`, data, {\n    headers: {\n      'Authorization': `${token}` //it will go to authorize middle ware check and destructed to user from token which will later be used to check whether the user is admin or not.\n    }\n  });\n};\n\nexport const rejectWorkerApplication = (token, data) => {\n  return axios.post(`${API}/user/client/job/reject/worker/application`, data, {\n    headers: {\n      'Authorization': `${token}` //it will go to authorize middle ware check and destructed to user from token which will later be used to check whether the user is admin or not.\n    }\n  });\n};","map":{"version":3,"names":["API","axios","createJobAdvertise","token","data","post","headers","loadAllJobAdvertiseforClientId","id","get","loadJobApplicantsByJobId","job_id","client_id","selectWorkersApplication","rejectWorkerApplication"],"sources":["/home/mddil/Desktop/projects/freelancebangla/frontend/src/api/apiClient.js"],"sourcesContent":["import { API } from \"../utils/config\";\nimport axios from 'axios';\n\nexport const createJobAdvertise = (token, data) => {\n    return axios.post(`${API}/user/client/job/advertise/new`, data, {\n        headers: {\n            'Authorization': `${token}` //it will go to authorize middle ware check and destructed to user from token which will later be used to check whether the user is admin or not.\n        }\n    })\n}\nexport const loadAllJobAdvertiseforClientId = (token, id) => {\n    return axios.get(`${API}/user/client/job/view/all/advertised/${id}`, {\n        headers: {\n            'Authorization': `${token}` //it will go to authorize middle ware check and destructed to user from token which will later be used to check whether the user is admin or not.\n        }\n    })\n}\n\nexport const loadJobApplicantsByJobId = (token, job_id, client_id) => {\n    return axios.get(`${API}/user/client/job/view/all/applicants/${job_id}/${client_id}`, {\n        headers: {\n            'Authorization': `${token}` //it will go to authorize middle ware check and destructed to user from token which will later be used to check whether the user is admin or not.\n        }\n    });\n}\n\nexport const selectWorkersApplication = (token, data) => { // data has selected_application_id\n    return axios.post(`${API}/user/client/job/select/worker/application`, data, {\n        headers: {\n            'Authorization': `${token}` //it will go to authorize middle ware check and destructed to user from token which will later be used to check whether the user is admin or not.\n        }\n    })\n}\n\nexport const rejectWorkerApplication = (token, data) => {\n    return axios.post(`${API}/user/client/job/reject/worker/application`, data, {\n        headers: {\n            'Authorization': `${token}` //it will go to authorize middle ware check and destructed to user from token which will later be used to check whether the user is admin or not.\n        }\n    })\n}"],"mappings":"AAAA,SAASA,GAAG,QAAQ,iBAAiB;AACrC,OAAOC,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,kBAAkB,GAAG,CAACC,KAAK,EAAEC,IAAI,KAAK;EAC/C,OAAOH,KAAK,CAACI,IAAI,CAAE,GAAEL,GAAI,gCAA+B,EAAEI,IAAI,EAAE;IAC5DE,OAAO,EAAE;MACL,eAAe,EAAG,GAAEH,KAAM,EAAC,CAAC;IAChC;EACJ,CAAC,CAAC;AACN,CAAC;;AACD,OAAO,MAAMI,8BAA8B,GAAG,CAACJ,KAAK,EAAEK,EAAE,KAAK;EACzD,OAAOP,KAAK,CAACQ,GAAG,CAAE,GAAET,GAAI,wCAAuCQ,EAAG,EAAC,EAAE;IACjEF,OAAO,EAAE;MACL,eAAe,EAAG,GAAEH,KAAM,EAAC,CAAC;IAChC;EACJ,CAAC,CAAC;AACN,CAAC;;AAED,OAAO,MAAMO,wBAAwB,GAAG,CAACP,KAAK,EAAEQ,MAAM,EAAEC,SAAS,KAAK;EAClE,OAAOX,KAAK,CAACQ,GAAG,CAAE,GAAET,GAAI,wCAAuCW,MAAO,IAAGC,SAAU,EAAC,EAAE;IAClFN,OAAO,EAAE;MACL,eAAe,EAAG,GAAEH,KAAM,EAAC,CAAC;IAChC;EACJ,CAAC,CAAC;AACN,CAAC;;AAED,OAAO,MAAMU,wBAAwB,GAAG,CAACV,KAAK,EAAEC,IAAI,KAAK;EAAE;EACvD,OAAOH,KAAK,CAACI,IAAI,CAAE,GAAEL,GAAI,4CAA2C,EAAEI,IAAI,EAAE;IACxEE,OAAO,EAAE;MACL,eAAe,EAAG,GAAEH,KAAM,EAAC,CAAC;IAChC;EACJ,CAAC,CAAC;AACN,CAAC;;AAED,OAAO,MAAMW,uBAAuB,GAAG,CAACX,KAAK,EAAEC,IAAI,KAAK;EACpD,OAAOH,KAAK,CAACI,IAAI,CAAE,GAAEL,GAAI,4CAA2C,EAAEI,IAAI,EAAE;IACxEE,OAAO,EAAE;MACL,eAAe,EAAG,GAAEH,KAAM,EAAC,CAAC;IAChC;EACJ,CAAC,CAAC;AACN,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}